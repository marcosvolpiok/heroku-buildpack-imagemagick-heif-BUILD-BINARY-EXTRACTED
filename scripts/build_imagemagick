#!/usr/bin/env bash

set -e

WORK_DIR=/usr/src

function handle_error() {
  local status=$?
  if [[ $status > 0 ]]; then
    echo "üî• There was a problem building the binary. Operation aborted."
    exit 1
  fi
}
trap handle_error EXIT SIGINT

function add_xenial_repositories() {
  cat <<-EOT >> /etc/apt/sources.list
  deb http://archive.ubuntu.com/ubuntu/ xenial main universe
  deb http://security.ubuntu.com/ubuntu xenial-security main
EOT
}

# add source packages repository to sources.list
function add_source_repositories() {
  echo "deb-src http://archive.ubuntu.com/ubuntu/ xenial main universe" >> /etc/apt/sources.list
  if [[ $STACK == "heroku-20" ]]; then
    add_xenial_repositories
  fi
}

add_source_repositories

echo "‚öôÔ∏è Getting libraries and dependencies..."
apt-get update -y
apt-get install -y build-essential autoconf libtool git-core
if [[ $STACK == "heroku-20" ]]; then
  echo "‚öôÔ∏è Getting additional dependencies for the selected stack..."
  apt-get install -y libomp5 libomp-10-dev libjasper-dev
fi
apt-get build-dep -y imagemagick libmagickcore-dev

# install the libde265 library
echo "‚öôÔ∏è Installing and configuring libde265..."
git clone https://github.com/strukturag/libde265.git $WORK_DIR/libde265
cd $WORK_DIR/libde265
./autogen.sh && ./configure && make && make install

# install the libheif library
echo "‚öôÔ∏è Installing and configuring libheif..."
git clone https://github.com/strukturag/libheif.git $WORK_DIR/libheif
cd $WORK_DIR/libheif
./autogen.sh && ./configure && make && make install

# echo "‚öôÔ∏è Installing and configuring ltdl..."
# git clone https://github.com/frida/libtool/ $WORK_DIR/libtool
# cd $WORK_DIR/libtool
# ./configure && make && make install

echo "‚öôÔ∏è Installing and configuring webp..."
wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.2.tar.gz
tar xvzf libwebp-1.2.2.tar.gz
cd libwebp-1.2.2
./configure
make && make install



# get, configure and install newest imagemagick
echo "‚öôÔ∏è Installing latest imagemagick..."
#### git clone https://github.com/ImageMagick/ImageMagick.git $WORK_DIR/imagemagick
wget https://download.imagemagick.org/ImageMagick/download/releases/ImageMagick-6.9.10-97.tar.xz -P $WORK_DIR
cd $WORK_DIR
tar xvf ImageMagick-6.9.10-97.tar.xz
mv ImageMagick-6.9.10-97 imagemagick

cd $WORK_DIR/imagemagick
./configure --with-heic=yes --prefix=$WORK_DIR/imagemagick --without-gvc --with-webp=yes
make && make install

# copy the dependencies into imagemagick lib directory
cp /usr/local/lib/libde265.so.0 $WORK_DIR/imagemagick/lib
cp /usr/local/lib/libheif.so.1 $WORK_DIR/imagemagick/lib
cp /usr/lib/x86_64-linux-gnu/libomp.so.5 $WORK_DIR/imagemagick/lib
cp /usr/lib/x86_64-linux-gnu/libiomp5.so $WORK_DIR/imagemagick/lib

# clean up the build and get ready for packaging
echo "üßπ Cleaning up..."
strip lib/*.a lib/lib*.so*

# compress the binary
echo "üóÑÔ∏è Compressing build..."
rm -rf build
mkdir build
tar czf $WORK_DIR/imagemagick/build/imagemagick.tar.gz bin include lib

# copy the compressed file/tarball from the docker container into the repo
cp $WORK_DIR/imagemagick/build/imagemagick.tar.gz /buildpack/build/$1

echo "‚úÖ All done!"
